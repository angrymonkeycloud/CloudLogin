@namespace AngryMonkey.CloudLogin
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.WebUtilities;
@using Microsoft.Extensions.Primitives;
@using Newtonsoft.Json
@inject CloudLoginClient cloudLogin
@inject NavigationManager nav
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JS

@if (IsAuthorized && CurrentUser?.PrimaryEmailAddress != null)
{
    <section>
        <article>
            @if (!IsWorking)
            {
                <h1>Error</h1>
                <div>An error occured, please <a href="./cloudlogin/logout?redirectUri=@nav.BaseUri?actionState=@actionState&redirectUri=@redirectUri">Retry</a>.</div>
            }
            else
            {
                <h1>Successful @CurrentUser.DisplayName</h1>
                @if (actionState == "mobile")
                {
                    <div>Mobile login successful, go back to the mobile application.</div>

                }
                else
                {
                    <div>Login successful.</div>
                }
                <div>First Name: @CurrentUser.FirstName | Last Name: @CurrentUser.LastName</div>
                <div>Email Address: @CurrentUser.PrimaryEmailAddress.Input</div>
                <a href="./cloudlogin/logout?@(string.IsNullOrEmpty(redirectUri) ? "" : $"redirectUri={nav.BaseUri}?actionState=mobile&redirectUri={redirectUri}")">Logout</a>
            }
        </article>
    </section>
}
else
{
    <section>
        <article>

            <AngryMonkey.CloudLogin.CloudLoginComponent Logo="@Logo" ActionState="@actionState" CurrentUser="@CurrentUser" RedirectUri="@RedirectUri" />
        </article>
    </section>
}

@code {

    [Parameter] public string Logo { get; set; }
    public string? redirectUri { get; set; }
    private string? RedirectUri => redirectUri ?? "/";
    public string? actionState { get; set; }
    public User? CurrentUser { get; set; } = new();
    public bool IsAuthorized { get; set; } = false;
    public bool StayOnPage { get; set; } = false;
    public bool IsWorking { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        IsAuthorized = await cloudLogin.IsAuthenticated();

        if (IsAuthorized)
            CurrentUser = await cloudLogin.CurrentUser();

        Uri uri = nav.ToAbsoluteUri(nav.Uri);
        QueryHelpers.ParseQuery(uri.Query).TryGetValue("redirectUri", out StringValues redirecUriValue);
        QueryHelpers.ParseQuery(uri.Query).TryGetValue("actionState", out StringValues actionStateValue);
        actionState = actionStateValue;
        redirectUri = redirecUriValue;

        StayOnPage = string.IsNullOrEmpty(redirectUri);
        StateHasChanged();

        if (string.IsNullOrEmpty(actionState))
            actionState = "login";

        if (string.IsNullOrEmpty(redirectUri))
            redirectUri = "/";

        if (actionState == "mobile" && !string.IsNullOrEmpty(redirectUri))
        {
            if (CurrentUser != null && IsAuthorized)
                await cloudLogin.CreateUserRequestCustom(CurrentUser.ID, new Guid(redirectUri));
            else
                IsWorking = false;

            StayOnPage = true;
            StateHasChanged();
            return;
        }

        if (IsAuthorized && (actionState == "login" || actionState == "/") && !string.IsNullOrEmpty(redirectUri) && !StayOnPage && CurrentUser != null)
        {
            Guid? requestID = await cloudLogin.CreateUserRequest(CurrentUser.ID);

            string seperator = redirectUri.Contains('?') ? "&" : "?";

            if (CurrentUser != null)
            {
                if (requestID == null)
                    nav.NavigateTo($"{redirectUri}{seperator}currentUser={HttpUtility.UrlEncode(JsonConvert.SerializeObject(CurrentUser))}");
                else
                    nav.NavigateTo($"{redirectUri}{seperator}requestId={HttpUtility.UrlEncode(requestID.ToString())}");
            }
            return;
        }
        IsWorking = false;
        StateHasChanged();
    }
}