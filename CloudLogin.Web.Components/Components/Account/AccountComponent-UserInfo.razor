@using AngryMonkey.CloudLogin.Interfaces
@using System.Globalization
@inject ICloudLogin cloudLogin

@namespace AngryMonkey.CloudLogin

<div class="account-section ms-account">
    <!-- Header card with avatar and name -->
    <div class="header-card">
        <div class="profile-block">
            @if (!string.IsNullOrWhiteSpace(CurrentUser.ProfilePicture))
            {
                <img class="avatar" src="@CurrentUser.ProfilePicture" alt="Profile picture" />
            }
            else
            {
                <div class="avatar initials" aria-hidden="true">@GetInitials()</div>
            }

            <div class="profile-copy">
                <p class="subtitle">Personalize your account with a photo. Your profile photo may appear in apps and devices that use your account.</p>
                <button class="btn btn-outline" disabled>Change photo</button>
            </div>
        </div>

        <div class="full-name-row">
            <div class="full-name">@GetFullName()</div>
            <button class="link-action" disabled>Edit name</button>
        </div>
    </div>

    <!-- Profile info card -->
    <div class="card info-card">
        <div class="card-header">
            <h4>Profile info</h4>
            <button class="link-action" disabled>Edit profile info</button>
        </div>
        <div class="kv-list">
            <div class="kv-row">
                <div class="kv-key">Date of birth</div>
                <div class="kv-value">@FormatDateOnly(CurrentUser.DateOfBirth)</div>
            </div>
            <div class="kv-row">
                <div class="kv-key">Country or region</div>
                <div class="kv-value">@FormatCountry(CurrentUser.Country)</div>
            </div>
            <div class="kv-row">
                <div class="kv-key">Language</div>
                <div class="kv-value">@FormatLanguage(CurrentUser.Locale)</div>
            </div>
            <div class="kv-row">
                <div class="kv-key">Regional formats</div>
                <div class="kv-value">@FormatRegionalFormats(CurrentUser.Locale)</div>
            </div>
        </div>
    </div>

    <!-- Account info card -->
    <div class="card info-card">
        <div class="card-header">
            <h4>Account info</h4>
            <button class="link-action" disabled>Edit account info</button>
        </div>
        <div class="kv-list">
            <div class="kv-row">
                <div class="kv-key">Email address</div>
                <div class="kv-value">@GetPrimaryEmail()</div>
            </div>
            <div class="kv-row">
                <div class="kv-key">Phone number</div>
                <div class="kv-value">@GetPrimaryPhone()</div>
            </div>
            <div class="kv-row meta">
                <div class="kv-key">Account created</div>
                <div class="kv-value">@FormatDateTime(CurrentUser.CreatedOn)</div>
            </div>
            <div class="kv-row meta">
                <div class="kv-key">Last sign in</div>
                <div class="kv-value">@FormatDateTime(CurrentUser.LastSignedIn)</div>
            </div>
        </div>
    </div>

    @if (CurrentUser.Providers.Any())
    {
        <div class="card providers-card">
            <div class="card-header">
                <h4>Connected providers</h4>
            </div>
            <div class="providers-list">
                @foreach (var provider in CurrentUser.Providers.Distinct())
                {
                    <span class="provider-badge">@FormatProviderName(provider)</span>
                }
            </div>
        </div>
    }

    @if (CurrentUser.IsLocked)
    {
        <div class="alert alert-warning">
            <strong>Account Status:</strong> This account is currently locked.
        </div>
    }
</div>

@code {
    [Parameter] public required User CurrentUser { get; set; }

    private string GetFullName()
    {
        var full = CurrentUser.DisplayName;
        if (string.IsNullOrWhiteSpace(full))
        {
            full = string.Join(" ", new[] { CurrentUser.FirstName, CurrentUser.LastName }
                .Where(s => !string.IsNullOrWhiteSpace(s)));
        }
        return string.IsNullOrWhiteSpace(full) ? "Not specified" : full!;
    }

    private string GetInitials()
    {
        var parts = new[] { CurrentUser.FirstName, CurrentUser.LastName }
            .Where(s => !string.IsNullOrWhiteSpace(s))
            .Select(s => s!.Trim());
        var initials = string.Concat(parts.Select(p => char.ToUpperInvariant(p[0])));
        if (string.IsNullOrWhiteSpace(initials) && !string.IsNullOrWhiteSpace(CurrentUser.DisplayName))
            initials = new string(CurrentUser.DisplayName!.Where(char.IsLetter).Take(2).Select(char.ToUpperInvariant).ToArray());
        return string.IsNullOrWhiteSpace(initials) ? "?" : initials;
    }

    private static string FormatDateOnly(DateOnly? date)
        => date.HasValue ? date.Value.ToString("M/d/yyyy") : "Not specified";

    private static string FormatCountry(string? countryCode)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(countryCode))
                return "Not specified";
            var ri = new RegionInfo(countryCode);
            return ri.DisplayName;
        }
        catch
        {
            return countryCode ?? "Not specified";
        }
    }

    private static string FormatLanguage(string? locale)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(locale))
                return "Not specified";
            var culture = CultureInfo.GetCultureInfo(locale);
            return culture.DisplayName;
        }
        catch
        {
            return locale ?? "Not specified";
        }
    }

    private static string FormatRegionalFormats(string? locale)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(locale))
                return "Not specified";
            var culture = CultureInfo.GetCultureInfo(locale);
            var sample = DateTimeOffset.Now.ToString("f", culture);
            return $"{culture.DisplayName}; {sample}";
        }
        catch
        {
            return locale ?? "Not specified";
        }
    }

    private string GetPrimaryEmail()
        => CurrentUser.PrimaryEmailAddress?.Input ?? "None";

    private string GetPrimaryPhone()
    {
        var phone = CurrentUser.PrimaryPhoneNumber?.Input;
        return string.IsNullOrWhiteSpace(phone) ? "None" : FormatPhoneNumber(phone);
    }

    /// <summary>
    /// Formats DateTime for user-friendly display
    /// </summary>
    private static string FormatDateTime(DateTimeOffset dateTime)
    {
        if (dateTime == DateTimeOffset.MinValue)
            return "Not available";

        var timeAgo = DateTimeOffset.UtcNow - dateTime;

        if (timeAgo.TotalDays < 1 && timeAgo.TotalHours < 1)
            return $"{(int)timeAgo.TotalMinutes} minutes ago";

        if (timeAgo.TotalDays < 1)
            return $"{(int)timeAgo.TotalHours} hours ago";

        if (timeAgo.TotalDays < 7)
            return $"{(int)timeAgo.TotalDays} days ago";

        if (timeAgo.TotalDays < 30)
            return $"{(int)(timeAgo.TotalDays / 7)} weeks ago";

        if (timeAgo.TotalDays < 365)
            return $"{(int)(timeAgo.TotalDays / 30)} months ago";

        return dateTime.ToString("MMMM dd, yyyy");
    }

    /// <summary>
    /// Formats phone number for display
    /// </summary>
    private static string FormatPhoneNumber(string phoneNumber)
    {
        if (string.IsNullOrEmpty(phoneNumber))
            return phoneNumber;

        // Basic formatting for US/Canada numbers
        if (phoneNumber.StartsWith("+1") && phoneNumber.Length == 12)
        {
            return $"{phoneNumber[..2]} ({phoneNumber[2..5]}) {phoneNumber[5..8]}-{phoneNumber[8..]}";
        }

        return phoneNumber;
    }

    /// <summary>
    /// Formats provider names for display
    /// </summary>
    private static string FormatProviderName(string provider)
    {
        return provider.ToLowerInvariant() switch
        {
            "microsoft" => "Microsoft",
            "google" => "Google",
            "facebook" => "Facebook",
            "twitter" => "Twitter",
            "whatsapp" => "WhatsApp",
            "code" => "Email/SMS Code",
            "password" => "Password",
            _ => provider
        };
    }
}
