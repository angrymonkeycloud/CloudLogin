@namespace AngryMonkey.CloudLogin
@using AngryMonkey.CloudLogin.Interfaces
@inject ICloudLogin cloudLogin

<h3>Email Addresses</h3>

<ul>
    @foreach (var email in CurrentUser.EmailAddresses.OrderByDescending(e => e.IsPrimary))
    {
        <li>
            @email.Input
            @if (email.IsPrimary)
            {
                <span class="badge">Primary</span>
            }
            <button @onclick="() => SetPrimary(email.Input)">Set Primary</button>
            <button @onclick="() => RemoveEmail(email.Input)">Remove</button>
        </li>
    }
</ul>

<input type="text" @bind="NewEmail" placeholder="Add new email" />
<button @onclick="AddEmail">Add Email</button>

@code {
    [Parameter] public required User CurrentUser { get; set; }

    private string NewEmail { get; set; } = string.Empty;

    private async Task AddEmail()
    {
        if (string.IsNullOrEmpty(NewEmail))
            return;

        var newEmail = new LoginInput
            {
                Input = NewEmail,
                Format = InputFormat.EmailAddress,
                IsPrimary = false,
                Providers = new List<LoginProvider>()
            };

        CurrentUser.EmailAddresses.Add(newEmail);

        await cloudLogin.UpdateUser(CurrentUser);

        NewEmail = string.Empty;
    }

    private async Task RemoveEmail(string email)
    {
        var emailToRemove = CurrentUser?.EmailAddresses.FirstOrDefault(e => e.Input == email);

        if (emailToRemove == null)
            return;

        CurrentUser.EmailAddresses.Remove(emailToRemove);
        await cloudLogin.UpdateUser(CurrentUser);
    }

    private async Task SetPrimary(string email)
    {
        foreach (var e in CurrentUser.EmailAddresses)
            e.IsPrimary = e.Input == email;

        await cloudLogin.UpdateUser(CurrentUser);
    }
}
