@page "/"

@using AngryMonkey.CloudLogin.Interfaces
@using AngryMonkey.CloudLogin.Server
@using AngryMonkey.CloudWeb
@using Microsoft.Extensions.Primitives;
@using System.Web
@using System.Text.Json

@inject ICloudLogin cloudLogin
@inject NavigationManager nav
@inject CloudLoginConfiguration configuration

<CloudHeadContent />

@if (IsAuthorized && CurrentUser?.PrimaryEmailAddress != null)
{
    <section>
        <article class="center">
            @if (!IsWorking)
            {
                <h1>Error</h1>
                <div>An error occured, please <a href="./cloudlogin/logout?redirectUri=@nav.BaseUri?redirectUri=@RedirectUri">Retry</a>.</div>
            }
            else
            {
                @* @if ("mobile")
                {
                    <div>Mobile login successful, go back to the mobile application.</div>
                } *@
                @if (RedirectUri == "/")
                {
                    <h1>Login successful</h1>
                    <a href="/account">View Account</a>
                }
                else
                {
                    <div>Continue...</div>
                }
            }
        </article>
    </section>
}
else
{
    <LoginPageComponent Logo="@configuration.Logo" RedirectUri="@_RedirectUri" />
}

@code {
    [Parameter, SupplyParameterFromQuery(Name = "redirectUri")]
    public string? RedirectUri { get; set; }

    private string? _RedirectUri => RedirectUri ?? "/";
    public User? CurrentUser { get; set; } = new();
    public bool IsAuthorized { get; set; } = false;
    public bool IsWorking { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        IsAuthorized = await cloudLogin.IsAuthenticated();

        if (IsAuthorized)
        {
            await Task.Yield();
            nav.NavigateTo("/Account");

            return;
        }

        if (string.IsNullOrEmpty(RedirectUri))
            RedirectUri = "/";

        // if ( == "mobile" && !string.IsNullOrEmpty(RedirectUri))
        // {
        //     if (CurrentUser != null && IsAuthorized)
        //         await cloudLogin.CreateLoginRequest(CurrentUser.ID, new Guid(RedirectUri));
        //     else
        //         IsWorking = false;

        //     StateHasChanged();
        //     return;
        // }

        if (IsAuthorized && CurrentUser != null)
        {
            if (RedirectUri != "/")
            {
                Guid? requestID = await cloudLogin.CreateLoginRequest(CurrentUser.ID);

                string seperator = RedirectUri.Contains('?') ? "&" : "?";

                if (CurrentUser != null)
                {
                    if (requestID == null)
                        nav.NavigateTo($"{RedirectUri}{seperator}currentUser={HttpUtility.UrlEncode(JsonSerializer.Serialize(CurrentUser, CloudLoginSerialization.Options))}");
                    else
                        nav.NavigateTo($"{RedirectUri}{seperator}requestId={HttpUtility.UrlEncode(requestID.ToString())}");
                }
            }
            StateHasChanged();
            return;
        }
        IsWorking = false;
        StateHasChanged();
    }
}