@page "/"

@using AngryMonkey.CloudLogin.Interfaces
@using AngryMonkey.CloudLogin.Server
@using AngryMonkey.CloudWeb
@using Microsoft.Extensions.Primitives;
@using System.Web
@using System.Text.Json

@inject ICloudLogin cloudLogin
@inject NavigationManager nav
@inject CloudLoginConfiguration configuration

<CloudHeadContent />

@if (IsAuthorized && CurrentUser?.PrimaryEmailAddress != null)
{
    <section>
        <article class="center">
            @if (!IsWorking)
            {
                <h1>Error</h1>
                <div>An error occured, please <a href="./cloudlogin/logout?referer=@nav.BaseUri?referer=@Referer">Retry</a>.</div>
            }
            else
            {
                @if (IsMobileApp)
                {
                    <div class="mobile-login-success">
                        <h1>Mobile login successful</h1>
                        <p>Please return to your mobile application. You can close this browser window.</p>
                        @if (!string.IsNullOrEmpty(Referer) && Referer != "/")
                        {
                            <div class="mobile-redirect-note">
                                <p><small>If the app doesn't automatically detect the login, please return to the app and try again.</small></p>
                            </div>
                        }
                    </div>
                }
                else if (string.IsNullOrEmpty(Referer) || Referer == "/")
                {
                    <h1>Login successful</h1>
                    <a href="/account">View Account</a>
                }
                else
                {
                    <div>Continue...</div>
                }
            }
        </article>
    </section>
}
else
{
    <LoginPageComponent Logo="@configuration.Logo" Referer="@Referer" />
}

@code {
    [Parameter, SupplyParameterFromQuery(Name = "referer")]
    public string? Referer { get; set; }

    [Parameter, SupplyParameterFromQuery(Name = "isMobileApp")]
    public bool IsMobileApp { get; set; } = false;

    public User? CurrentUser { get; set; } = new();
    public bool IsAuthorized { get; set; } = false;
    public bool IsWorking { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Referer))
            Referer = "/";

        // Debug: Log all query parameters
        var uri = new Uri(nav.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        IsAuthorized = await cloudLogin.IsAuthenticated();

        if (IsAuthorized)
        {
            CurrentUser = await cloudLogin.CurrentUser();

            // Handle redirect logic for authenticated users
            await HandleAuthenticatedUserRedirect();
            return;
        }

        if (string.IsNullOrEmpty(Referer))
            Referer = "/";

        IsWorking = false;
        StateHasChanged();
    }

    private async Task HandleAuthenticatedUserRedirect()
    {
        // Check for redirect parameters from OAuth callback
        var uri = new Uri(nav.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        string? requestId = query["requestId"];
        string? currentUser = query["currentUser"];

        // If we have callback parameters, we're already being redirected from OAuth
        if (!string.IsNullOrEmpty(requestId) || !string.IsNullOrEmpty(currentUser))
        {
            IsWorking = true;
            StateHasChanged();
            return;
        }

        // If no referer or it's just "/", go to default account page for web users
        if (string.IsNullOrEmpty(Referer) || Referer == "/")
        {
            if (!IsMobileApp)
            {
                await Task.Yield();
                nav.NavigateTo("/Account");
                return;
            }
            else
            {
                // Mobile users with no referer see success message
                IsWorking = true;
                StateHasChanged();
                return;
            }
        }

        // Handle external referer for both mobile and web
        if (Referer != "/")
        {
            Guid? requestID = null;
            try
            {
                requestID = await cloudLogin.CreateLoginRequest(CurrentUser!.ID);
            }
            catch (Exception ex) { }

            string separator = Referer.Contains('?') ? "&" : "?";
            string finalRedirectUrl;

            if (requestID != null && requestID != Guid.Empty)
            {
                finalRedirectUrl = $"{Referer}{separator}requestId={HttpUtility.UrlEncode(requestID.ToString())}&keepMeSignedIn=true";
            }
            else
            {
                // Fallback: include user data directly
                string userJson = JsonSerializer.Serialize(CurrentUser, CloudLoginSerialization.Options);
                finalRedirectUrl = $"{Referer}{separator}keepMeSignedIn=true";
            }

            if (IsMobileApp)
                finalRedirectUrl += "&isMobileApp=true";

            if (IsMobileApp)
            {
                // For mobile apps, show success message instead of redirecting
                IsWorking = true;
                StateHasChanged();
            }
            else
                nav.NavigateTo(finalRedirectUrl, true); // forceLoad = true for external URLs

            return;
        }

        // Default fallback
        IsWorking = true;
        StateHasChanged();
    }
}